{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Implement `create_subtitles` Script",
        "description": "Create a Python script that takes a video file and uses whisper.cpp to generate a `source.srt` file.",
        "details": "The script should be executable from the command line. The output `source.srt` must be a standard SRT file.",
        "testStrategy": "Execute the script with a sample .mp4 file. Verify that a `source.srt` file is generated.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement `llm_correction` with Gemini API",
        "description": "Develop the Python script for `llm_correction`. This script will parse the `source.srt` file, send only the dialogue text to the Gemini API for correction, and then reconstruct a `cleaned.srt` file, preserving all original timestamps.",
        "details": "Implements P.2.1 and P.2.2. The script must include robust SRT parsing/reconstruction logic. The prompt sent to Gemini must contain strong instructions to only correct grammar and phrasing, without altering the timecodes.",
        "testStrategy": "Process a sample `source.srt` file. Compare the input `source.srt` and output `cleaned.srt` files. Verify that timestamps are identical, and only the dialogue text has been modified.",
        "priority": "medium",
        "dependencies": [1],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implement `tts` for Audio Generation",
        "description": "Create the `tts` Python script. It will read the `cleaned.srt` file, and for each entry, use a TTS library to generate an audio segment for the dialogue.",
        "details": "This script will handle parsing the SRT file and making individual calls to the TTS engine.",
        "testStrategy": "Run the script with a `cleaned.srt` file. Verify that a set of individual audio files (e.g., .wav or .mp3) are created, one for each line of dialogue in the SRT.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Timeline-based Audio Merging in `tts`",
        "description": "Add functionality to the `tts` to combine all generated audio segments into a single, final audio file. The merging process must respect the timestamps from the `cleaned.srt` to ensure correct pacing and silence between spoken lines.",
        "details": "This will likely involve using an audio manipulation library like pydub or ffmpeg-python to sequence the audio clips and insert silence based on the start and end times in the SRT file.",
        "testStrategy": "Generate a final audio file from a multi-line SRT. Play the audio file alongside the original video to verify that the generated speech is correctly synchronized with the video's dialogue timings.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-10-28T12:15:49.583Z",
      "updated": "2025-10-29T00:00:00.000Z",
      "description": "Tasks for master context"
    }
  }
}